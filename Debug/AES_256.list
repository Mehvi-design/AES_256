
AES_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004430  08004430  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004430  08004430  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004434  08004434  00005434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004438  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000030  08004464  00006030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004464  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fadb  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237b  00000000  00000000  00015b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00017eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094e  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d1a  00000000  00000000  00019426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd74  00000000  00000000  00042140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9623  00000000  00000000  00051eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b4d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  0014b51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000030 	.word	0x20000030
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004354 	.word	0x08004354

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000034 	.word	0x20000034
 80001e8:	08004354 	.word	0x08004354

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ByteToHex>:
uint8_t user_encrypted_text[32];
char rx_buffer[32];
// Function to convert a byte to two ASCII hex characters

void ByteToHex(uint8_t byte, char *hex)
{
 8000518:	b4b0      	push	{r4, r5, r7}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <ByteToHex+0x50>)
 8000526:	f107 040c 	add.w	r4, r7, #12
 800052a:	461d      	mov	r5, r3
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	682b      	ldr	r3, [r5, #0]
 8000532:	7023      	strb	r3, [r4, #0]
    hex[0] = hex_chars[(byte >> 4) & 0x0F];
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	091b      	lsrs	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	3320      	adds	r3, #32
 8000540:	443b      	add	r3, r7
 8000542:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	701a      	strb	r2, [r3, #0]
    hex[1] = hex_chars[byte & 0x0F];
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 020f 	and.w	r2, r3, #15
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	3220      	adds	r2, #32
 8000556:	443a      	add	r2, r7
 8000558:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800055c:	701a      	strb	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	3724      	adds	r7, #36	@ 0x24
 8000562:	46bd      	mov	sp, r7
 8000564:	bcb0      	pop	{r4, r5, r7}
 8000566:	4770      	bx	lr
 8000568:	0800436c 	.word	0x0800436c

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 faba 	bl	8000aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f889 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f933 	bl	80007e4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800057e:	f000 f905 	bl	800078c <MX_LPUART1_UART_Init>
  MX_AES_Init();
 8000582:	f000 f8d5 	bl	8000730 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  // Encrypt
  if (HAL_CRYP_AESCBC_Encrypt(&hcryp,plain_text,32 , encrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <main+0xf4>)
 800058e:	2220      	movs	r2, #32
 8000590:	4934      	ldr	r1, [pc, #208]	@ (8000664 <main+0xf8>)
 8000592:	4835      	ldr	r0, [pc, #212]	@ (8000668 <main+0xfc>)
 8000594:	f000 fd39 	bl	800100a <HAL_CRYP_AESCBC_Encrypt>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <main+0x36>
  	                             Error_Handler();
 800059e:	f000 f963 	bl	8000868 <Error_Handler>
                         }
  if (HAL_CRYP_AESCBC_Decrypt(&hcryp, encrypted_text, 32, decrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	4b30      	ldr	r3, [pc, #192]	@ (800066c <main+0x100>)
 80005aa:	2220      	movs	r2, #32
 80005ac:	492c      	ldr	r1, [pc, #176]	@ (8000660 <main+0xf4>)
 80005ae:	482e      	ldr	r0, [pc, #184]	@ (8000668 <main+0xfc>)
 80005b0:	f000 fd59 	bl	8001066 <HAL_CRYP_AESCBC_Decrypt>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <main+0x52>
  	                            Error_Handler();
 80005ba:	f000 f955 	bl	8000868 <Error_Handler>
  }
  char hex[3]; // 2 hex digits + null terminator
     hex[2] = '\0'; // for safety
 80005be:	2300      	movs	r3, #0
 80005c0:	70bb      	strb	r3, [r7, #2]

     HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Encrypted Text: ", strlen("Encrypted Text: "), HAL_MAX_DELAY);
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2210      	movs	r2, #16
 80005c8:	4929      	ldr	r1, [pc, #164]	@ (8000670 <main+0x104>)
 80005ca:	482a      	ldr	r0, [pc, #168]	@ (8000674 <main+0x108>)
 80005cc:	f002 fdc8 	bl	8003160 <HAL_UART_Transmit>
     for (int i = 0; i < 32; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	e019      	b.n	800060a <main+0x9e>
  	   ByteToHex(encrypted_text[i], hex);
 80005d6:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <main+0xf4>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	463a      	mov	r2, r7
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff98 	bl	8000518 <ByteToHex>
  	   HAL_UART_Transmit(&hlpuart1, (uint8_t *)hex, 2, HAL_MAX_DELAY);
 80005e8:	4639      	mov	r1, r7
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	2202      	movs	r2, #2
 80005f0:	4820      	ldr	r0, [pc, #128]	@ (8000674 <main+0x108>)
 80005f2:	f002 fdb5 	bl	8003160 <HAL_UART_Transmit>
  	   HAL_UART_Transmit(&hlpuart1, (uint8_t *)" ", 1, HAL_MAX_DELAY);
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	491e      	ldr	r1, [pc, #120]	@ (8000678 <main+0x10c>)
 80005fe:	481d      	ldr	r0, [pc, #116]	@ (8000674 <main+0x108>)
 8000600:	f002 fdae 	bl	8003160 <HAL_UART_Transmit>
     for (int i = 0; i < 32; i++) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b1f      	cmp	r3, #31
 800060e:	dde2      	ble.n	80005d6 <main+0x6a>
     }

   HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2202      	movs	r2, #2
 8000616:	4919      	ldr	r1, [pc, #100]	@ (800067c <main+0x110>)
 8000618:	4816      	ldr	r0, [pc, #88]	@ (8000674 <main+0x108>)
 800061a:	f002 fda1 	bl	8003160 <HAL_UART_Transmit>

   HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Decrypted Text: ", strlen("Decrypted Text: "), HAL_MAX_DELAY);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2210      	movs	r2, #16
 8000624:	4916      	ldr	r1, [pc, #88]	@ (8000680 <main+0x114>)
 8000626:	4813      	ldr	r0, [pc, #76]	@ (8000674 <main+0x108>)
 8000628:	f002 fd9a 	bl	8003160 <HAL_UART_Transmit>
   HAL_UART_Transmit(&hlpuart1, decrypted_text, 32, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2220      	movs	r2, #32
 8000632:	490e      	ldr	r1, [pc, #56]	@ (800066c <main+0x100>)
 8000634:	480f      	ldr	r0, [pc, #60]	@ (8000674 <main+0x108>)
 8000636:	f002 fd93 	bl	8003160 <HAL_UART_Transmit>
   HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	2202      	movs	r2, #2
 8000640:	490e      	ldr	r1, [pc, #56]	@ (800067c <main+0x110>)
 8000642:	480c      	ldr	r0, [pc, #48]	@ (8000674 <main+0x108>)
 8000644:	f002 fd8c 	bl	8003160 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(rx_buffer, 0, sizeof(rx_buffer));
 8000648:	2220      	movs	r2, #32
 800064a:	2100      	movs	r1, #0
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <main+0x118>)
 800064e:	f003 fe54 	bl	80042fa <memset>
	  memset(user_encrypted_text, 0, sizeof(user_encrypted_text));
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <main+0x11c>)
 8000658:	f003 fe4f 	bl	80042fa <memset>
	  memset(rx_buffer, 0, sizeof(rx_buffer));
 800065c:	bf00      	nop
 800065e:	e7f3      	b.n	8000648 <main+0xdc>
 8000660:	20000138 	.word	0x20000138
 8000664:	20000000 	.word	0x20000000
 8000668:	20000050 	.word	0x20000050
 800066c:	20000158 	.word	0x20000158
 8000670:	08004380 	.word	0x08004380
 8000674:	200000b0 	.word	0x200000b0
 8000678:	08004394 	.word	0x08004394
 800067c:	08004398 	.word	0x08004398
 8000680:	0800439c 	.word	0x0800439c
 8000684:	20000198 	.word	0x20000198
 8000688:	20000178 	.word	0x20000178

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2244      	movs	r2, #68	@ 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fe2d 	bl	80042fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006b2:	f001 f999 	bl	80019e8 <HAL_PWREx_ControlVoltageScaling>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006bc:	f000 f8d4 	bl	8000868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006da:	230a      	movs	r3, #10
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f9e0 	bl	8001ab4 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006fa:	f000 f8b5 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fde6 	bl	80022e8 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000722:	f000 f8a1 	bl	8000868 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	@ 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_AES_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_AES_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_AES_Init+0x4c>)
 800073c:	2204      	movs	r2, #4
 800073e:	609a      	str	r2, [r3, #8]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_AES_Init+0x4c>)
 8000742:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000746:	60da      	str	r2, [r3, #12]
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_AES_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_AES_Init+0x4c>)
 8000750:	2220      	movs	r2, #32
 8000752:	615a      	str	r2, [r3, #20]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_AES_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_AES_Init+0x4c>)
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <MX_AES_Init+0x54>)
 800075e:	621a      	str	r2, [r3, #32]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_AES_Init+0x4c>)
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <MX_AES_Init+0x58>)
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_AES_Init+0x4c>)
 8000768:	f000 fb45 	bl	8000df6 <HAL_CRYP_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_AES_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f879 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000050 	.word	0x20000050
 8000780:	50060000 	.word	0x50060000
 8000784:	080043b0 	.word	0x080043b0
 8000788:	080043d0 	.word	0x080043d0

0800078c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <MX_LPUART1_UART_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_LPUART1_UART_Init+0x50>)
 80007ca:	f002 fc7b 	bl	80030c4 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f848 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	40008000 	.word	0x40008000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_GPIO_Init+0x7c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a18      	ldr	r2, [pc, #96]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800082a:	f001 f933 	bl	8001a94 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000836:	f001 f8b1 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800083a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000854:	f000 ff10 	bl	8001678 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_CRYP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_CRYP_MspInit+0x38>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d10b      	bne.n	80008e6 <HAL_CRYP_MspInit+0x2a>
  {
    /* USER CODE BEGIN AES_MspInit 0 */

    /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <HAL_CRYP_MspInit+0x3c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <HAL_CRYP_MspInit+0x3c>)
 80008d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <HAL_CRYP_MspInit+0x3c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END AES_MspInit 1 */

  }

}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	50060000 	.word	0x50060000
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_CRYP_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_CRYP_MspDeInit+0x2c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d105      	bne.n	800091a <HAL_CRYP_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN AES_MspDeInit 0 */

    /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <HAL_CRYP_MspDeInit+0x30>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_CRYP_MspDeInit+0x30>)
 8000914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
    /* USER CODE BEGIN AES_MspDeInit 1 */

    /* USER CODE END AES_MspDeInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	50060000 	.word	0x50060000
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ac      	sub	sp, #176	@ 0xb0
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	228c      	movs	r2, #140	@ 0x8c
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fcd2 	bl	80042fa <memset>
  if(huart->Instance==LPUART1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a26      	ldr	r2, [pc, #152]	@ (80009f4 <HAL_UART_MspInit+0xc4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d145      	bne.n	80009ec <HAL_UART_MspInit+0xbc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000960:	2320      	movs	r3, #32
 8000962:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000964:	2300      	movs	r3, #0
 8000966:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fedf 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000978:	f7ff ff76 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 800097e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000980:	4a1d      	ldr	r2, [pc, #116]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 800098a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_UART_MspInit+0xc8>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009ac:	f001 f872 	bl	8001a94 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009ca:	2308      	movs	r3, #8
 80009cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <HAL_UART_MspInit+0xcc>)
 80009d8:	f000 fe4e 	bl	8001678 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2046      	movs	r0, #70	@ 0x46
 80009e2:	f000 f9d2 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80009e6:	2046      	movs	r0, #70	@ 0x46
 80009e8:	f000 f9eb 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009ec:	bf00      	nop
 80009ee:	37b0      	adds	r7, #176	@ 0xb0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40008000 	.word	0x40008000
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48001800 	.word	0x48001800

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a56:	f000 f89d 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <LPUART1_IRQHandler+0x10>)
 8000a66:	f002 fc05 	bl	8003274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000b0 	.word	0x200000b0

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f003 fc21 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff fd4f 	bl	800056c <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000adc:	08004438 	.word	0x08004438
  ldr r2, =_sbss
 8000ae0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ae4:	200001bc 	.word	0x200001bc

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>

08000aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f93d 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f80e 	bl	8000b1c <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0c:	f7ff feb2 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d023      	beq.n	8000b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_InitTick+0x70>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f949 	bl	8000dde <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d809      	bhi.n	8000b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f913 	bl	8000d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <HAL_InitTick+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e001      	b.n	8000b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000028 	.word	0x20000028
 8000b8c:	20000020 	.word	0x20000020
 8000b90:	20000024 	.word	0x20000024

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000028 	.word	0x20000028
 8000bb8:	200001b8 	.word	0x200001b8

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200001b8 	.word	0x200001b8

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	@ (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_CRYP_Init>:
  *       stored in the MCU memory before calling HAL_CRYP_Init(). Refer to explanations
  *       hereabove.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if(hcryp == NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0cd      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM)))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b18      	cmp	r3, #24
 8000e0e:	d10e      	bne.n	8000e2e <HAL_CRYP_Init+0x38>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8000e14:	2b40      	cmp	r3, #64	@ 0x40
 8000e16:	d008      	beq.n	8000e2a <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	2b60      	cmp	r3, #96	@ 0x60
 8000e1e:	d004      	beq.n	8000e2a <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e28:	d101      	bne.n	8000e2e <HAL_CRYP_Init+0x38>
#endif
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0ba      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>
  /* Check that key derivation is not set in CMAC mode or CCM mode when applicable */
#if defined(AES_CR_NPBLB)
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d106      	bne.n	8000e44 <HAL_CRYP_Init+0x4e>
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e3e:	d101      	bne.n	8000e44 <HAL_CRYP_Init+0x4e>
#endif
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0af      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <HAL_CRYP_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fd2f 	bl	80008bc <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2202      	movs	r2, #2
 8000e62:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Disable the Peripheral */
  __HAL_CRYP_DISABLE(hcryp);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

  /*=============================================================*/
  /* AES initialization common to all operating modes            */
  /*=============================================================*/
  /* Set the Key size selection */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Set the default CRYP phase when this parameter is not used.
     Phase is updated below in case of GCM/GMAC(/CMAC)(/CCM) setting. */
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	220a      	movs	r2, #10
 8000e90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /*=============================================================*/
  /* Carry on the initialization based on the AES operating mode */
  /*=============================================================*/
  /* Key derivation */
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d111      	bne.n	8000ec0 <HAL_CRYP_Init+0xca>
  {
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 0218 	bic.w	r2, r3, #24
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0208 	orr.w	r2, r2, #8
 8000eae:	601a      	str	r2, [r3, #0]

    /* Configure the Key registers */
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f906 	bl	80010c2 <CRYP_SetKey>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d059      	beq.n	8000f70 <HAL_CRYP_Init+0x17a>
    {
      return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e071      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>
  /* Encryption / Decryption (with or without key derivation) / authentication */
  {
#if !defined(AES_CR_NPBLB)
    /* Set data type, operating and chaining modes.
       In case of GCM or GMAC, data type is forced to 0b00 */
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	2b60      	cmp	r3, #96	@ 0x60
 8000ec6:	d110      	bne.n	8000eea <HAL_CRYP_Init+0xf4>
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed2:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6911      	ldr	r1, [r2, #16]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6952      	ldr	r2, [r2, #20]
 8000ede:	4311      	orrs	r1, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e012      	b.n	8000f10 <HAL_CRYP_Init+0x11a>
    }
    else
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef4:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6891      	ldr	r1, [r2, #8]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6912      	ldr	r2, [r2, #16]
 8000f00:	4311      	orrs	r1, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6952      	ldr	r2, [r2, #20]
 8000f06:	4311      	orrs	r1, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
      or Counter with Cipher Mode (CCM) when applicable */
#if defined(AES_CR_NPBLB)
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	2b60      	cmp	r3, #96	@ 0x60
 8000f16:	d004      	beq.n	8000f22 <HAL_CRYP_Init+0x12c>
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f20:	d10e      	bne.n	8000f40 <HAL_CRYP_Init+0x14a>
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 41c0 	bic.w	r1, r3, #24576	@ 0x6000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69da      	ldr	r2, [r3, #28]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    }


    /* Configure the Key registers if no need to bypass this step */
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d107      	bne.n	8000f58 <HAL_CRYP_Init+0x162>
    {
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f8ba 	bl	80010c2 <CRYP_SetKey>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_CRYP_Init+0x162>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e025      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>
      }
    }

    /* If applicable, configure the Initialization Vector */
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_CRYP_Init+0x17a>
    {
      if (CRYP_SetInitVector(hcryp) != HAL_OK)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f91c 	bl	800119e <CRYP_SetInitVector>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_CRYP_Init+0x17a>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e019      	b.n	8000fa4 <HAL_CRYP_Init+0x1ae>
  /* Clear NPBLB field */
  CLEAR_BIT(hcryp->Instance->CR, AES_CR_NPBLB);
#endif

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hcryp->CrypOutCount = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset ErrorCode field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset Mode suspension request */
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Enable the Peripheral */
  __HAL_CRYP_ENABLE(hcryp);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0201 	orr.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if(hcryp == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e021      	b.n	8001002 <HAL_CRYP_DeInit+0x56>
  }

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Set the default CRYP phase */
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hcryp->CrypOutCount = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the CRYP Peripheral Clock */
  __HAL_CRYP_DISABLE(hcryp);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

    /* DeInit the low level hardware */
    hcryp->MspDeInitCallback(hcryp);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fc86 	bl	80008fc <HAL_CRYP_MspDeInit>
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_CRYP_AESCBC_Encrypt>:
  * @note   This API is provided only to maintain compatibility with legacy software. Users should directly
  *         resort to generic HAL_CRYPEx_AES() API instead (usage recommended).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af02      	add	r7, sp, #8
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4613      	mov	r3, r2
 8001018:	80fb      	strh	r3, [r7, #6]
  /* Re-initialize AES IP with proper parameters */
  if (HAL_CRYP_DeInit(hcryp) != HAL_OK)
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff ffc6 	bl	8000fac <HAL_CRYP_DeInit>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_CRYP_AESCBC_Encrypt+0x20>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e019      	b.n	800105e <HAL_CRYP_AESCBC_Encrypt+0x54>
  }
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hcryp->Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2220      	movs	r2, #32
 8001034:	615a      	str	r2, [r3, #20]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_CRYP_Init(hcryp) != HAL_OK)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff feda 	bl	8000df6 <HAL_CRYP_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_CRYP_AESCBC_Encrypt+0x42>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e008      	b.n	800105e <HAL_CRYP_AESCBC_Encrypt+0x54>
  }

  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 800104c:	88fa      	ldrh	r2, [r7, #6]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f8f4 	bl	8001244 <HAL_CRYPEx_AES>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_CRYP_AESCBC_Decrypt>:
  * @note   This API is provided only to maintain compatibility with legacy software. Users should directly
  *         resort to generic HAL_CRYPEx_AES() API instead (usage recommended).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af02      	add	r7, sp, #8
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	80fb      	strh	r3, [r7, #6]
  /* Re-initialize AES IP with proper parameters */
  if (HAL_CRYP_DeInit(hcryp) != HAL_OK)
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff98 	bl	8000fac <HAL_CRYP_DeInit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_CRYP_AESCBC_Decrypt+0x20>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e019      	b.n	80010ba <HAL_CRYP_AESCBC_Decrypt+0x54>
  }
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_KEYDERIVATION_DECRYPT;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2218      	movs	r2, #24
 800108a:	611a      	str	r2, [r3, #16]
  hcryp->Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2220      	movs	r2, #32
 8001090:	615a      	str	r2, [r3, #20]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_CRYP_Init(hcryp) != HAL_OK)
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff feac 	bl	8000df6 <HAL_CRYP_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_CRYP_AESCBC_Decrypt+0x42>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e008      	b.n	80010ba <HAL_CRYP_AESCBC_Decrypt+0x54>
  }

  return HAL_CRYPEx_AES(hcryp, pCypherData, Size, pPlainData, Timeout);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f8c6 	bl	8001244 <HAL_CRYPEx_AES>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <CRYP_SetKey>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b08d      	sub	sp, #52	@ 0x34
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <CRYP_SetKey+0x14>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e05d      	b.n	8001192 <CRYP_SetKey+0xd0>
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80010e4:	d12b      	bne.n	800113e <CRYP_SetKey+0x7c>
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 80010e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61fa      	str	r2, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	ba12      	rev	r2, r2
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    keyaddr+=4U;
 80010f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f8:	3304      	adds	r3, #4
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 80010fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	623a      	str	r2, [r7, #32]
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	ba12      	rev	r2, r2
 800110a:	639a      	str	r2, [r3, #56]	@ 0x38
    keyaddr+=4U;
 800110c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 8001112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	627a      	str	r2, [r7, #36]	@ 0x24
 800111c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111e:	ba12      	rev	r2, r2
 8001120:	635a      	str	r2, [r3, #52]	@ 0x34
    keyaddr+=4U;
 8001122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001124:	3304      	adds	r3, #4
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8001128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001134:	ba12      	rev	r2, r2
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
    keyaddr+=4U;
 8001138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113a:	3304      	adds	r3, #4
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 800113e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fa      	str	r2, [r7, #12]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	ba12      	rev	r2, r2
 800114c:	61da      	str	r2, [r3, #28]
  keyaddr+=4U;
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	3304      	adds	r3, #4
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8001154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	613a      	str	r2, [r7, #16]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	ba12      	rev	r2, r2
 8001162:	619a      	str	r2, [r3, #24]
  keyaddr+=4U;
 8001164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001166:	3304      	adds	r3, #4
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 800116a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617a      	str	r2, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	ba12      	rev	r2, r2
 8001178:	615a      	str	r2, [r3, #20]
  keyaddr+=4U;
 800117a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117c:	3304      	adds	r3, #4
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8001180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61ba      	str	r2, [r7, #24]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	ba12      	rev	r2, r2
 800118e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3734      	adds	r7, #52	@ 0x34
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <CRYP_SetInitVector>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef CRYP_SetInitVector(CRYP_HandleTypeDef *hcryp)
{
 800119e:	b480      	push	{r7}
 80011a0:	b089      	sub	sp, #36	@ 0x24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  uint32_t ivaddr;

#if !defined(AES_CR_NPBLB)
  if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ae:	d110      	bne.n	80011d2 <CRYP_SetInitVector+0x34>
  {
    hcryp->Instance->IVR3 = 0;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	e031      	b.n	8001236 <CRYP_SetInitVector+0x98>
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <CRYP_SetInitVector+0x40>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e02c      	b.n	8001238 <CRYP_SetInitVector+0x9a>
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e2:	61fb      	str	r3, [r7, #28]

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fa      	str	r2, [r7, #12]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	ba12      	rev	r2, r2
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    ivaddr+=4U;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3304      	adds	r3, #4
 80011f8:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613a      	str	r2, [r7, #16]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	ba12      	rev	r2, r2
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
    ivaddr+=4U;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	617a      	str	r2, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	ba12      	rev	r2, r2
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
    ivaddr+=4U;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3304      	adds	r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61ba      	str	r2, [r7, #24]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	ba12      	rev	r2, r2
 8001234:	621a      	str	r2, [r3, #32]
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3724      	adds	r7, #36	@ 0x24
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	80fb      	strh	r3, [r7, #6]

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d14d      	bne.n	80012fc <HAL_CRYPEx_AES+0xb8>
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d104      	bne.n	8001272 <HAL_CRYPEx_AES+0x2e>
    {
      if (pOutputData == NULL)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_CRYPEx_AES+0x44>
      {
        return  HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e045      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_CRYPEx_AES+0x40>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_CRYPEx_AES+0x40>
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_CRYPEx_AES+0x44>
      {
        return  HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e03a      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_CRYPEx_AES+0x52>
 8001292:	2302      	movs	r3, #2
 8001294:	e033      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

    /* Call CRYP_ReadKey() API if the operating mode is set to
       key derivation, CRYP_ProcessData() otherwise  */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d109      	bne.n	80012c2 <HAL_CRYPEx_AES+0x7e>
    {
      if(CRYP_ReadKey(hcryp, pOutputData, Timeout) != HAL_OK)
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f8be 	bl	8001434 <CRYP_ReadKey>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00e      	beq.n	80012dc <HAL_CRYPEx_AES+0x98>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e01d      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
      }
    }
    else
    {
      if(CRYP_ProcessData(hcryp, pInputData, Size, pOutputData, Timeout) != HAL_OK)
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f81a 	bl	8001306 <CRYP_ProcessData>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_CRYPEx_AES+0x98>
      {
        return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e010      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
      }
    }

    /* If the state has not been set to SUSPENDED, set it to
       READY, otherwise keep it as it is */
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d003      	beq.n	80012f0 <HAL_CRYPEx_AES+0xac>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <HAL_CRYPEx_AES+0xba>
  }
  else
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <CRYP_ProcessData>:
  * @param  Output Pointer to the returned buffer.
  * @param  Timeout Specify Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ilength, uint8_t* Output, uint32_t Timeout)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b088      	sub	sp, #32
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	80fb      	strh	r3, [r7, #6]
  uint32_t index;
  uint32_t inputaddr  = (uint32_t)Input;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	61bb      	str	r3, [r7, #24]
  uint32_t outputaddr = (uint32_t)Output;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	617b      	str	r3, [r7, #20]


  for(index=0U ; (index < Ilength); index += 16U)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e07d      	b.n	8001420 <CRYP_ProcessData+0x11a>
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	3304      	adds	r3, #4
 8001332:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	3304      	adds	r3, #4
 8001342:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3304      	adds	r3, #4
 8001352:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3304      	adds	r3, #4
 8001362:	61bb      	str	r3, [r7, #24]

    /* Wait for CCF flag to be raised */
    if(CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f8e4 	bl	8001534 <CRYP_WaitOnCCFlag>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <CRYP_ProcessData+0x80>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
      __HAL_UNLOCK(hcryp);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e052      	b.n	800142c <CRYP_ProcessData+0x126>
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001394:	601a      	str	r2, [r3, #0]

    /* Read the Output block from the Data Output Register */
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	68d2      	ldr	r2, [r2, #12]
 800139e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3304      	adds	r3, #4
 80013a4:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	68d2      	ldr	r2, [r2, #12]
 80013ae:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3304      	adds	r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	68d2      	ldr	r2, [r2, #12]
 80013be:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3304      	adds	r3, #4
 80013c4:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	68d2      	ldr	r2, [r2, #12]
 80013ce:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3304      	adds	r3, #4
 80013d4:	617b      	str	r3, [r7, #20]

    /* If the suspension flag has been raised and if the processing is not about
       to end, suspend processing */
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d11c      	bne.n	800141a <CRYP_ProcessData+0x114>
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f103 0210 	add.w	r2, r3, #16
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d216      	bcs.n	800141a <CRYP_ProcessData+0x114>
    {
      /* Reset SuspendRequest */
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Save current reading and writing locations of Input and Output buffers */
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Save the number of bytes that remain to be processed at this point */
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f1a3 0210 	sub.w	r2, r3, #16
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Change the CRYP state */
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2205      	movs	r2, #5
 8001412:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

      return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e008      	b.n	800142c <CRYP_ProcessData+0x126>
  for(index=0U ; (index < Ilength); index += 16U)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3310      	adds	r3, #16
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	f4ff af7d 	bcc.w	8001324 <CRYP_ProcessData+0x1e>
    }


  }
  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0

}
 800142c:	4618      	mov	r0, r3
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <CRYP_ReadKey>:
  * @param  Output Pointer to the returned buffer.
  * @param  Timeout Specify Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_ReadKey(CRYP_HandleTypeDef *hcryp, uint8_t* Output, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t outputaddr = (uint32_t)Output;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Wait for CCF flag to be raised */
  if(CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f874 	bl	8001534 <CRYP_WaitOnCCFlag>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <CRYP_ReadKey+0x32>
  {
    hcryp->State = HAL_CRYP_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e062      	b.n	800152c <CRYP_ReadKey+0xf8>
  }
  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001474:	601a      	str	r2, [r3, #0]

    /* Read the derivative key from the AES_KEYRx registers */
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800147e:	d12b      	bne.n	80014d8 <CRYP_ReadKey+0xa4>
  {
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001488:	627a      	str	r2, [r7, #36]	@ 0x24
 800148a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148c:	ba12      	rev	r2, r2
 800148e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8001490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001492:	3304      	adds	r3, #4
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800149c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80014a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014a2:	ba12      	rev	r2, r2
 80014a4:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a8:	3304      	adds	r3, #4
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b8:	ba12      	rev	r2, r2
 80014ba:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80014bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014be:	3304      	adds	r3, #4
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80014cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ce:	ba12      	rev	r2, r2
 80014d0:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80014d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d4:	3304      	adds	r3, #4
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e0:	617a      	str	r2, [r7, #20]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	ba12      	rev	r2, r2
 80014e6:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80014e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ea:	3304      	adds	r3, #4
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f6:	61ba      	str	r2, [r7, #24]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	ba12      	rev	r2, r2
 80014fc:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80014fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001500:	3304      	adds	r3, #4
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150c:	61fa      	str	r2, [r7, #28]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	ba12      	rev	r2, r2
 8001512:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8001514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001516:	3304      	adds	r3, #4
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001522:	623a      	str	r2, [r7, #32]
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	ba12      	rev	r2, r2
 8001528:	601a      	str	r2, [r3, #0]


  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3738      	adds	r7, #56	@ 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <CRYP_WaitOnCCFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800153e:	f7ff fb3d 	bl	8000bbc <HAL_GetTick>
 8001542:	60f8      	str	r0, [r7, #12]

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8001544:	e00d      	b.n	8001562 <CRYP_WaitOnCCFlag+0x2e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d009      	beq.n	8001562 <CRYP_WaitOnCCFlag+0x2e>
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 800154e:	f7ff fb35 	bl	8000bbc <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d201      	bcs.n	8001562 <CRYP_WaitOnCCFlag+0x2e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e007      	b.n	8001572 <CRYP_WaitOnCCFlag+0x3e>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ea      	beq.n	8001546 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d008      	beq.n	80015a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2204      	movs	r2, #4
 8001596:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e022      	b.n	80015ea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 020e 	bic.w	r2, r2, #14
 80015b2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c8:	f003 021c 	and.w	r2, r3, #28
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e029      	b.n	800166e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f003 021c 	and.w	r2, r3, #28
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
    }
  }
  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e166      	b.n	8001956 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8158 	beq.w	8001950 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d005      	beq.n	80016b8 <HAL_GPIO_Init+0x40>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d130      	bne.n	800171a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ee:	2201      	movs	r2, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 0201 	and.w	r2, r3, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d017      	beq.n	8001756 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d123      	bne.n	80017aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	6939      	ldr	r1, [r7, #16]
 80017a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0203 	and.w	r2, r3, #3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b2 	beq.w	8001950 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ec:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_GPIO_Init+0x2fc>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f0:	4a60      	ldr	r2, [pc, #384]	@ (8001974 <HAL_GPIO_Init+0x2fc>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001974 <HAL_GPIO_Init+0x2fc>)
 80017fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001804:	4a5c      	ldr	r2, [pc, #368]	@ (8001978 <HAL_GPIO_Init+0x300>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800182e:	d02b      	beq.n	8001888 <HAL_GPIO_Init+0x210>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a52      	ldr	r2, [pc, #328]	@ (800197c <HAL_GPIO_Init+0x304>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d025      	beq.n	8001884 <HAL_GPIO_Init+0x20c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a51      	ldr	r2, [pc, #324]	@ (8001980 <HAL_GPIO_Init+0x308>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d01f      	beq.n	8001880 <HAL_GPIO_Init+0x208>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a50      	ldr	r2, [pc, #320]	@ (8001984 <HAL_GPIO_Init+0x30c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d019      	beq.n	800187c <HAL_GPIO_Init+0x204>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <HAL_GPIO_Init+0x310>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d013      	beq.n	8001878 <HAL_GPIO_Init+0x200>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4e      	ldr	r2, [pc, #312]	@ (800198c <HAL_GPIO_Init+0x314>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d00d      	beq.n	8001874 <HAL_GPIO_Init+0x1fc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4d      	ldr	r2, [pc, #308]	@ (8001990 <HAL_GPIO_Init+0x318>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0x1f8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a4c      	ldr	r2, [pc, #304]	@ (8001994 <HAL_GPIO_Init+0x31c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_GPIO_Init+0x1f4>
 8001868:	2307      	movs	r3, #7
 800186a:	e00e      	b.n	800188a <HAL_GPIO_Init+0x212>
 800186c:	2308      	movs	r3, #8
 800186e:	e00c      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001870:	2306      	movs	r3, #6
 8001872:	e00a      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001874:	2305      	movs	r3, #5
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001878:	2304      	movs	r3, #4
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x212>
 800187c:	2303      	movs	r3, #3
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x212>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	@ (8001978 <HAL_GPIO_Init+0x300>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_GPIO_Init+0x320>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018cc:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <HAL_GPIO_Init+0x320>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_GPIO_Init+0x320>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f6:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <HAL_GPIO_Init+0x320>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <HAL_GPIO_Init+0x320>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001920:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <HAL_GPIO_Init+0x320>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_GPIO_Init+0x320>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194a:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <HAL_GPIO_Init+0x320>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae91 	bne.w	8001688 <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	48001800 	.word	0x48001800
 8001994:	48001c00 	.word	0x48001c00
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40007000 	.word	0x40007000

080019e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019f6:	d130      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a04:	d038      	beq.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2232      	movs	r2, #50	@ 0x32
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2c:	e002      	b.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a40:	d102      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a54:	d110      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e00f      	b.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d007      	beq.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a70:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	20000020 	.word	0x20000020
 8001a90:	431bde83 	.word	0x431bde83

08001a94 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa2:	6053      	str	r3, [r2, #4]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 bc08 	b.w	80022d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac8:	4b96      	ldr	r3, [pc, #600]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad2:	4b94      	ldr	r3, [pc, #592]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80e4 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4c>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	f040 808b 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8087 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b00:	4b88      	ldr	r3, [pc, #544]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_OscConfig+0x64>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e3df      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4b81      	ldr	r3, [pc, #516]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_RCC_OscConfig+0x7e>
 8001b28:	4b7e      	ldr	r3, [pc, #504]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b30:	e005      	b.n	8001b3e <HAL_RCC_OscConfig+0x8a>
 8001b32:	4b7c      	ldr	r3, [pc, #496]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d223      	bcs.n	8001b8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fd92 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3c0      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b56:	4b73      	ldr	r3, [pc, #460]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b70      	ldr	r3, [pc, #448]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	496d      	ldr	r1, [pc, #436]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b6b      	ldr	r3, [pc, #428]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4968      	ldr	r1, [pc, #416]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e025      	b.n	8001bd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8a:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b63      	ldr	r3, [pc, #396]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4960      	ldr	r1, [pc, #384]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	495b      	ldr	r1, [pc, #364]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd52 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e380      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd6:	f000 fc87 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b51      	ldr	r3, [pc, #324]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4950      	ldr	r1, [pc, #320]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe ff8e 	bl	8000b1c <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d052      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	e364      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d032      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7fe ffcb 	bl	8000bbc <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7fe ffc7 	bl	8000bbc <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e34d      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3c:	4b39      	ldr	r3, [pc, #228]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a35      	ldr	r2, [pc, #212]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b33      	ldr	r3, [pc, #204]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4930      	ldr	r1, [pc, #192]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	492b      	ldr	r1, [pc, #172]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7c:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a28      	ldr	r2, [pc, #160]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff98 	bl	8000bbc <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c90:	f7fe ff94 	bl	8000bbc <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e31a      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1dc>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d073      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x21c>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d063      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d15f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2f7      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x24c>
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e025      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_OscConfig+0x280>
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a02      	ldr	r2, [pc, #8]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080043e0 	.word	0x080043e0
 8001d2c:	20000020 	.word	0x20000020
 8001d30:	20000024 	.word	0x20000024
 8001d34:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a9f      	ldr	r2, [pc, #636]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b9d      	ldr	r3, [pc, #628]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9c      	ldr	r2, [pc, #624]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ff32 	bl	8000bbc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ff2e 	bl	8000bbc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2b4      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b92      	ldr	r3, [pc, #584]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ff1e 	bl	8000bbc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7fe ff1a 	bl	8000bbc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e2a0      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4b88      	ldr	r3, [pc, #544]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e27d      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4973      	ldr	r1, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe fed9 	bl	8000bbc <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7fe fed5 	bl	8000bbc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e25b      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b65      	ldr	r3, [pc, #404]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	495f      	ldr	r1, [pc, #380]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe feb5 	bl	8000bbc <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7fe feb1 	bl	8000bbc <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e237      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7fe fe90 	bl	8000bbc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fe8c 	bl	8000bbc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e212      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fe73 	bl	8000bbc <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7fe fe6f 	bl	8000bbc <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1f5      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b32      	ldr	r3, [pc, #200]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fe36 	bl	8000bbc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe fe32 	bl	8000bbc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1b8      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f8a:	e029      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x50c>
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	4a03      	ldr	r2, [pc, #12]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc6:	4a9c      	ldr	r2, [pc, #624]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd0:	4b99      	ldr	r3, [pc, #612]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	4a98      	ldr	r2, [pc, #608]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe fde8 	bl	8000bbc <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fde4 	bl	8000bbc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e168      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002006:	4b8c      	ldr	r3, [pc, #560]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ed      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x53c>
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7fe fdd1 	bl	8000bbc <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fdcd 	bl	8000bbc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e151      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b80      	ldr	r3, [pc, #512]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ed      	bne.n	800201e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b7b      	ldr	r3, [pc, #492]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	4a7a      	ldr	r2, [pc, #488]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03c      	beq.n	80020da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002068:	4b73      	ldr	r3, [pc, #460]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800206e:	4a72      	ldr	r2, [pc, #456]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe fda0 	bl	8000bbc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002080:	f7fe fd9c 	bl	8000bbc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e122      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002092:	4b69      	ldr	r3, [pc, #420]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCC_OscConfig+0x5cc>
 80020a0:	e01b      	b.n	80020da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020a2:	4b65      	ldr	r3, [pc, #404]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80020a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020a8:	4a63      	ldr	r2, [pc, #396]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fd83 	bl	8000bbc <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ba:	f7fe fd7f 	bl	8000bbc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e105      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80020ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ef      	bne.n	80020ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80f9 	beq.w	80022d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f040 80cf 	bne.w	800228c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ee:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	429a      	cmp	r2, r3
 8002100:	d12c      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	3b01      	subs	r3, #1
 800210e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d123      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11b      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d113      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d109      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d071      	beq.n	8002240 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d068      	beq.n	8002234 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002162:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800216e:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0ac      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2d      	ldr	r2, [pc, #180]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800218a:	f7fe fd17 	bl	8000bbc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fd13 	bl	8000bbc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e099      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_RCC_OscConfig+0x788>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021ca:	0212      	lsls	r2, r2, #8
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0552      	lsls	r2, r2, #21
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021de:	0852      	lsrs	r2, r2, #1
 80021e0:	3a01      	subs	r2, #1
 80021e2:	0652      	lsls	r2, r2, #25
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021ea:	06d2      	lsls	r2, r2, #27
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4912      	ldr	r1, [pc, #72]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800220c:	f7fe fcd6 	bl	8000bbc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fcd2 	bl	8000bbc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e058      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002232:	e050      	b.n	80022d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e04f      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
 8002238:	40021000 	.word	0x40021000
 800223c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d144      	bne.n	80022d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002264:	f7fe fcaa 	bl	8000bbc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fca6 	bl	8000bbc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e02c      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x7b8>
 800228a:	e024      	b.n	80022d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d01f      	beq.n	80022d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 8002298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fc8d 	bl	8000bbc <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe fc89 	bl	8000bbc <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4905      	ldr	r1, [pc, #20]	@ (80022e0 <HAL_RCC_OscConfig+0x82c>)
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_OscConfig+0x830>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
 80022d0:	e001      	b.n	80022d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	feeefffc 	.word	0xfeeefffc

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0e7      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b75      	ldr	r3, [pc, #468]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b72      	ldr	r3, [pc, #456]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	4970      	ldr	r1, [pc, #448]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b6e      	ldr	r3, [pc, #440]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cf      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4960      	ldr	r1, [pc, #384]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b5a      	ldr	r3, [pc, #360]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0a6      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e09a      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239e:	4b4e      	ldr	r3, [pc, #312]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e086      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b46      	ldr	r3, [pc, #280]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4943      	ldr	r1, [pc, #268]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe fbf4 	bl	8000bbc <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe fbf0 	bl	8000bbc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e06e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d010      	beq.n	800242e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002418:	429a      	cmp	r2, r3
 800241a:	d208      	bcs.n	800242e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	492b      	ldr	r1, [pc, #172]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242e:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d210      	bcs.n	800245e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0207 	bic.w	r2, r3, #7
 8002444:	4923      	ldr	r1, [pc, #140]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e036      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4918      	ldr	r1, [pc, #96]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4910      	ldr	r1, [pc, #64]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249c:	f000 f824 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	490b      	ldr	r1, [pc, #44]	@ (80024dc <HAL_RCC_ClockConfig+0x1f4>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1fc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fb2b 	bl	8000b1c <HAL_InitTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024ca:	7afb      	ldrb	r3, [r7, #11]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080043e0 	.word	0x080043e0
 80024e0:	20000020 	.word	0x20000020
 80024e4:	20000024 	.word	0x20000024

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d121      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d11e      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800251c:	4b34      	ldr	r3, [pc, #208]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002528:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002544:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d102      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e004      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d101      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 800256e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d134      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xa6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
 800258c:	e005      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0e5b      	lsrs	r3, r3, #25
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e0:	69bb      	ldr	r3, [r7, #24]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080043f8 	.word	0x080043f8
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000020 	.word	0x20000020

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4904      	ldr	r1, [pc, #16]	@ (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080043f0 	.word	0x080043f0

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002648:	f7ff ffda 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	@ (800266c <HAL_RCC_GetPCLK2Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	080043f0 	.word	0x080043f0

08002670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800267c:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f9a0 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
 800268e:	e014      	b.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	4a24      	ldr	r2, [pc, #144]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	@ 0x58
 800269c:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a8:	f7ff f990 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 80026ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c0:	d10b      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	@ 0x80
 80026c6:	d919      	bls.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80026cc:	d902      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e013      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e010      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	@ 0x80
 80026de:	d902      	bls.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e0:	2303      	movs	r3, #3
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e00a      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b80      	cmp	r3, #128	@ 0x80
 80026ea:	d102      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ec:	2302      	movs	r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e004      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b70      	cmp	r3, #112	@ 0x70
 80026f6:	d101      	bne.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0207 	bic.w	r2, r3, #7
 8002704:	4909      	ldr	r1, [pc, #36]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800270c:	4b07      	ldr	r3, [pc, #28]	@ (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002738:	2300      	movs	r3, #0
 800273a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273c:	2300      	movs	r3, #0
 800273e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d041      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002750:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002754:	d02a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002756:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800275a:	d824      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800275c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002766:	d81e      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800276c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002770:	d010      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002772:	e018      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002774:	4b86      	ldr	r3, [pc, #536]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a85      	ldr	r2, [pc, #532]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002780:	e015      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 facd 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002792:	e00c      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3320      	adds	r3, #32
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fbb6 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a4:	e003      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	74fb      	strb	r3, [r7, #19]
      break;
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b4:	4b76      	ldr	r3, [pc, #472]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c2:	4973      	ldr	r1, [pc, #460]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027ca:	e001      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d041      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027e4:	d02a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027ea:	d824      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027f0:	d008      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027f6:	d81e      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002800:	d010      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002802:	e018      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002804:	4b62      	ldr	r3, [pc, #392]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a61      	ldr	r2, [pc, #388]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002810:	e015      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa85 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002822:	e00c      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3320      	adds	r3, #32
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fb6e 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	74fb      	strb	r3, [r7, #19]
      break;
 800283a:	e000      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800283c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002844:	4b52      	ldr	r3, [pc, #328]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002852:	494f      	ldr	r1, [pc, #316]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800285a:	e001      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a0 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002872:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b41      	ldr	r3, [pc, #260]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	4a40      	ldr	r2, [pc, #256]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6593      	str	r3, [r2, #88]	@ 0x58
 8002894:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b0:	f7fe f984 	bl	8000bbc <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe f980 	bl	8000bbc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	74fb      	strb	r3, [r7, #19]
        break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d15c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028de:	4b2c      	ldr	r3, [pc, #176]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d019      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002906:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a20      	ldr	r2, [pc, #128]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe f93f 	bl	8000bbc <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002940:	e00b      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe f93b 	bl	8000bbc <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d902      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	74fb      	strb	r3, [r7, #19]
            break;
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ec      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800296e:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	4904      	ldr	r1, [pc, #16]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002986:	e009      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
 800298c:	e006      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299c:	7c7b      	ldrb	r3, [r7, #17]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4ba6      	ldr	r3, [pc, #664]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	4aa5      	ldr	r2, [pc, #660]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ba:	4ba0      	ldr	r3, [pc, #640]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	f023 0203 	bic.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	499c      	ldr	r1, [pc, #624]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029dc:	4b97      	ldr	r3, [pc, #604]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f023 020c 	bic.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	4994      	ldr	r1, [pc, #592]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fe:	4b8f      	ldr	r3, [pc, #572]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	498b      	ldr	r1, [pc, #556]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a20:	4b86      	ldr	r3, [pc, #536]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	4983      	ldr	r1, [pc, #524]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a42:	4b7e      	ldr	r3, [pc, #504]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a50:	497a      	ldr	r1, [pc, #488]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a64:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	4972      	ldr	r1, [pc, #456]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a86:	4b6d      	ldr	r3, [pc, #436]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a94:	4969      	ldr	r1, [pc, #420]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aa8:	4b64      	ldr	r3, [pc, #400]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab6:	4961      	ldr	r1, [pc, #388]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aca:	4b5c      	ldr	r3, [pc, #368]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	4958      	ldr	r1, [pc, #352]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aec:	4b53      	ldr	r3, [pc, #332]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afa:	4950      	ldr	r1, [pc, #320]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	4947      	ldr	r1, [pc, #284]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b30:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	493f      	ldr	r1, [pc, #252]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b52:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4936      	ldr	r1, [pc, #216]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b72:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a31      	ldr	r2, [pc, #196]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	60d3      	str	r3, [r2, #12]
 8002b7e:	e011      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f8c9 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d028      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	491f      	ldr	r1, [pc, #124]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bce:	d106      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bda:	60d3      	str	r3, [r2, #12]
 8002bdc:	e011      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f89a 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c1c:	4907      	ldr	r1, [pc, #28]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2e:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a02      	ldr	r2, [pc, #8]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c38:	60d3      	str	r3, [r2, #12]
 8002c3a:	e013      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002c3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f869 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02f      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c70:	4b2c      	ldr	r3, [pc, #176]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7e:	4929      	ldr	r1, [pc, #164]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	2102      	movs	r1, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f846 	bl	8002d28 <RCCEx_PLLSAI1_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d014      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f925 	bl	8002f0c <RCCEx_PLLSAI2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cec:	490d      	ldr	r1, [pc, #52]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d10:	4904      	ldr	r1, [pc, #16]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d36:	4b74      	ldr	r3, [pc, #464]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d42:	4b71      	ldr	r3, [pc, #452]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0203 	and.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
       ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d047      	beq.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e044      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d018      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x86>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d825      	bhi.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d002      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x62>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d009      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x74>
 8002d88:	e020      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11d      	bne.n	8002dd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e01a      	b.n	8002dd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dac:	e013      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dae:	4b56      	ldr	r3, [pc, #344]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dba:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dca:	e006      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e004      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de2:	4b49      	ldr	r3, [pc, #292]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	430b      	orrs	r3, r1
 8002df8:	4943      	ldr	r1, [pc, #268]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d17c      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3f      	ldr	r2, [pc, #252]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fd fed4 	bl	8000bbc <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e18:	f7fd fed0 	bl	8000bbc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ef      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d15f      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d110      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e44:	4b30      	ldr	r3, [pc, #192]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002e4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	492a      	ldr	r1, [pc, #168]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	610b      	str	r3, [r1, #16]
 8002e64:	e027      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d112      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e6c:	4b26      	ldr	r3, [pc, #152]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	0211      	lsls	r1, r2, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6912      	ldr	r2, [r2, #16]
 8002e82:	0852      	lsrs	r2, r2, #1
 8002e84:	3a01      	subs	r2, #1
 8002e86:	0552      	lsls	r2, r2, #21
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	491f      	ldr	r1, [pc, #124]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	610b      	str	r3, [r1, #16]
 8002e90:	e011      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e92:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	0211      	lsls	r1, r2, #8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6952      	ldr	r2, [r2, #20]
 8002ea8:	0852      	lsrs	r2, r2, #1
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0652      	lsls	r2, r2, #25
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	4915      	ldr	r1, [pc, #84]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eb6:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fd fe7b 	bl	8000bbc <HAL_GetTick>
 8002ec6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec8:	e009      	b.n	8002ede <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eca:	f7fd fe77 	bl	8000bbc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	73fb      	strb	r3, [r7, #15]
          break;
 8002edc:	e005      	b.n	8002eea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ef      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4903      	ldr	r1, [pc, #12]	@ (8002f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1a:	4b69      	ldr	r3, [pc, #420]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f26:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0203 	and.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d10d      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f3e:	4b60      	ldr	r3, [pc, #384]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d047      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e044      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d018      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x86>
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d825      	bhi.n	8002fb0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d002      	beq.n	8002f6e <RCCEx_PLLSAI2_Config+0x62>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d009      	beq.n	8002f80 <RCCEx_PLLSAI2_Config+0x74>
 8002f6c:	e020      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6e:	4b54      	ldr	r3, [pc, #336]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11d      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7e:	e01a      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f80:	4b4f      	ldr	r3, [pc, #316]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e013      	b.n	8002fba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f92:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9e:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fae:	e006      	b.n	8002fbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb4:	e004      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	4938      	ldr	r1, [pc, #224]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d166      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fe8:	4b35      	ldr	r3, [pc, #212]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a34      	ldr	r2, [pc, #208]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fd fde2 	bl	8000bbc <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ffc:	f7fd fdde 	bl	8000bbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
        break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ef      	bne.n	8002ffc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d149      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d110      	bne.n	800304a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003030:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	430a      	orrs	r2, r1
 8003042:	491f      	ldr	r1, [pc, #124]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	614b      	str	r3, [r1, #20]
 8003048:	e011      	b.n	800306e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800304a:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003052:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	0211      	lsls	r1, r2, #8
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6912      	ldr	r2, [r2, #16]
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0652      	lsls	r2, r2, #25
 8003066:	430a      	orrs	r2, r1
 8003068:	4915      	ldr	r1, [pc, #84]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a13      	ldr	r2, [pc, #76]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003078:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fd fd9f 	bl	8000bbc <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003080:	e009      	b.n	8003096 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003082:	f7fd fd9b 	bl	8000bbc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	73fb      	strb	r3, [r7, #15]
          break;
 8003094:	e005      	b.n	80030a2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4903      	ldr	r1, [pc, #12]	@ (80030c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e040      	b.n	8003158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fc22 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	@ 0x24
 80030f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fe90 	bl	8003e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fbd5 	bl	80038c0 <UART_SetConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e01b      	b.n	8003158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800312e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800313e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 ff0f 	bl	8003f74 <UART_CheckIdleState>
 8003156:	4603      	mov	r3, r0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003174:	2b20      	cmp	r3, #32
 8003176:	d177      	bne.n	8003268 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Transmit+0x24>
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e070      	b.n	800326a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2221      	movs	r2, #33	@ 0x21
 8003194:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003196:	f7fd fd11 	bl	8000bbc <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b4:	d108      	bne.n	80031c8 <HAL_UART_Transmit+0x68>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e003      	b.n	80031d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031d0:	e02f      	b.n	8003232 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 ff71 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e03b      	b.n	800326a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	b292      	uxth	r2, r2
 8003206:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	3302      	adds	r3, #2
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e007      	b.n	8003220 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1c9      	bne.n	80031d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2200      	movs	r2, #0
 8003246:	2140      	movs	r1, #64	@ 0x40
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 ff3b 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e005      	b.n	800326a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b0ba      	sub	sp, #232	@ 0xe8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800329a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800329e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032a2:	4013      	ands	r3, r2
 80032a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d115      	bne.n	80032dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 82ca 	beq.w	8003866 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
      }
      return;
 80032da:	e2c4      	b.n	8003866 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8117 	beq.w	8003514 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032f6:	4b85      	ldr	r3, [pc, #532]	@ (800350c <HAL_UART_IRQHandler+0x298>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 810a 	beq.w	8003514 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_UART_IRQHandler+0xbc>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d011      	beq.n	8003360 <HAL_UART_IRQHandler+0xec>
 800333c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <HAL_UART_IRQHandler+0x11c>
 800336c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2204      	movs	r2, #4
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d017      	beq.n	80033cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2208      	movs	r2, #8
 80033ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c2:	f043 0208 	orr.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_UART_IRQHandler+0x18a>
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8230 	beq.w	800386a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003438:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d005      	beq.n	8003456 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800344a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04f      	beq.n	80034f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fea1 	bl	800419e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003466:	2b40      	cmp	r3, #64	@ 0x40
 8003468:	d141      	bne.n	80034ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3308      	adds	r3, #8
 8003492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800349a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1d9      	bne.n	800346a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_UART_IRQHandler+0x29c>)
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f893 	bl	80015f6 <HAL_DMA_Abort_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d017      	beq.n	8003506 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034e0:	4610      	mov	r0, r2
 80034e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e00f      	b.n	8003506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9d4 	bl	8003894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e00b      	b.n	8003506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9d0 	bl	8003894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e007      	b.n	8003506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9cc 	bl	8003894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003504:	e1b1      	b.n	800386a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003506:	bf00      	nop
    return;
 8003508:	e1af      	b.n	800386a <HAL_UART_IRQHandler+0x5f6>
 800350a:	bf00      	nop
 800350c:	04000120 	.word	0x04000120
 8003510:	08004267 	.word	0x08004267

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 816a 	bne.w	80037f2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8163 	beq.w	80037f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 815c 	beq.w	80037f2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	f040 80d4 	bne.w	80036fa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800355e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80ad 	beq.w	80036c2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800356e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003572:	429a      	cmp	r2, r3
 8003574:	f080 80a5 	bcs.w	80036c2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800357e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 8086 	bne.w	80036a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1da      	bne.n	8003594 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3308      	adds	r3, #8
 80035fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003602:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003606:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800360a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e1      	bne.n	80035de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800362a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800362c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800363e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003640:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003644:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800364c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e3      	bne.n	800361a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003684:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003688:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e4      	bne.n	8003660 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd ff6d 	bl	800157a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8f4 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80036c0:	e0d5      	b.n	800386e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f040 80ce 	bne.w	800386e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 80c5 	bne.w	800386e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8d8 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
      return;
 80036f8:	e0b9      	b.n	800386e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003706:	b29b      	uxth	r3, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80ab 	beq.w	8003872 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800371c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a6 	beq.w	8003872 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800374e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e4      	bne.n	8003726 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	623b      	str	r3, [r7, #32]
   return(result);
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003780:	633a      	str	r2, [r7, #48]	@ 0x30
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e3      	bne.n	800375c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 0310 	bic.w	r3, r3, #16
 80037bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	617b      	str	r3, [r7, #20]
   return(result);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e4      	bne.n	80037a8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f85c 	bl	80038a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037f0:	e03f      	b.n	8003872 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <HAL_UART_IRQHandler+0x5a8>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fd66 	bl	80042e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800381a:	e02d      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01c      	beq.n	8003876 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
    }
    return;
 8003844:	e017      	b.n	8003876 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_UART_IRQHandler+0x604>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fd17 	bl	8004292 <UART_EndTransmit_IT>
    return;
 8003864:	e008      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
      return;
 8003866:	bf00      	nop
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
    return;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
      return;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
      return;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_UART_IRQHandler+0x604>
    return;
 8003876:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003878:	37e8      	adds	r7, #232	@ 0xe8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b08a      	sub	sp, #40	@ 0x28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4ba4      	ldr	r3, [pc, #656]	@ (8003b80 <UART_SetConfig+0x2c0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a99      	ldr	r2, [pc, #612]	@ (8003b84 <UART_SetConfig+0x2c4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a90      	ldr	r2, [pc, #576]	@ (8003b88 <UART_SetConfig+0x2c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d126      	bne.n	8003998 <UART_SetConfig+0xd8>
 800394a:	4b90      	ldr	r3, [pc, #576]	@ (8003b8c <UART_SetConfig+0x2cc>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0xd0>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <UART_SetConfig+0xa0>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	08003981 	.word	0x08003981
 8003968:	08003979 	.word	0x08003979
 800396c:	08003989 	.word	0x08003989
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003976:	e116      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397e:	e112      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e10e      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398e:	e10a      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003996:	e106      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b90 <UART_SetConfig+0x2d0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d138      	bne.n	8003a14 <UART_SetConfig+0x154>
 80039a2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b8c <UART_SetConfig+0x2cc>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d82d      	bhi.n	8003a0c <UART_SetConfig+0x14c>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <UART_SetConfig+0xf8>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a0d 	.word	0x08003a0d
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a0d 	.word	0x08003a0d
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	080039f5 	.word	0x080039f5
 80039dc:	08003a0d 	.word	0x08003a0d
 80039e0:	08003a0d 	.word	0x08003a0d
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f2:	e0d8      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fa:	e0d4      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 80039fc:	2304      	movs	r3, #4
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a02:	e0d0      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a04:	2308      	movs	r3, #8
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0a:	e0cc      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a12:	e0c8      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5e      	ldr	r2, [pc, #376]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d125      	bne.n	8003a6a <UART_SetConfig+0x1aa>
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b8c <UART_SetConfig+0x2cc>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a28:	2b30      	cmp	r3, #48	@ 0x30
 8003a2a:	d016      	beq.n	8003a5a <UART_SetConfig+0x19a>
 8003a2c:	2b30      	cmp	r3, #48	@ 0x30
 8003a2e:	d818      	bhi.n	8003a62 <UART_SetConfig+0x1a2>
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d00a      	beq.n	8003a4a <UART_SetConfig+0x18a>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d814      	bhi.n	8003a62 <UART_SetConfig+0x1a2>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <UART_SetConfig+0x182>
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d008      	beq.n	8003a52 <UART_SetConfig+0x192>
 8003a40:	e00f      	b.n	8003a62 <UART_SetConfig+0x1a2>
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a48:	e0ad      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a50:	e0a9      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a52:	2304      	movs	r3, #4
 8003a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a58:	e0a5      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a60:	e0a1      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a62:	2310      	movs	r3, #16
 8003a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a68:	e09d      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <UART_SetConfig+0x2d8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d125      	bne.n	8003ac0 <UART_SetConfig+0x200>
 8003a74:	4b45      	ldr	r3, [pc, #276]	@ (8003b8c <UART_SetConfig+0x2cc>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a80:	d016      	beq.n	8003ab0 <UART_SetConfig+0x1f0>
 8003a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a84:	d818      	bhi.n	8003ab8 <UART_SetConfig+0x1f8>
 8003a86:	2b80      	cmp	r3, #128	@ 0x80
 8003a88:	d00a      	beq.n	8003aa0 <UART_SetConfig+0x1e0>
 8003a8a:	2b80      	cmp	r3, #128	@ 0x80
 8003a8c:	d814      	bhi.n	8003ab8 <UART_SetConfig+0x1f8>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <UART_SetConfig+0x1d8>
 8003a92:	2b40      	cmp	r3, #64	@ 0x40
 8003a94:	d008      	beq.n	8003aa8 <UART_SetConfig+0x1e8>
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x1f8>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e082      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa6:	e07e      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aae:	e07a      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab6:	e076      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003abe:	e072      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a35      	ldr	r2, [pc, #212]	@ (8003b9c <UART_SetConfig+0x2dc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d12a      	bne.n	8003b20 <UART_SetConfig+0x260>
 8003aca:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <UART_SetConfig+0x2cc>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad8:	d01a      	beq.n	8003b10 <UART_SetConfig+0x250>
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ade:	d81b      	bhi.n	8003b18 <UART_SetConfig+0x258>
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d00c      	beq.n	8003b00 <UART_SetConfig+0x240>
 8003ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aea:	d815      	bhi.n	8003b18 <UART_SetConfig+0x258>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <UART_SetConfig+0x238>
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af4:	d008      	beq.n	8003b08 <UART_SetConfig+0x248>
 8003af6:	e00f      	b.n	8003b18 <UART_SetConfig+0x258>
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e052      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b00:	2302      	movs	r3, #2
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e04e      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e04a      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b10:	2308      	movs	r3, #8
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b16:	e046      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1e:	e042      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a17      	ldr	r2, [pc, #92]	@ (8003b84 <UART_SetConfig+0x2c4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d13a      	bne.n	8003ba0 <UART_SetConfig+0x2e0>
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <UART_SetConfig+0x2cc>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b38:	d01a      	beq.n	8003b70 <UART_SetConfig+0x2b0>
 8003b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b3e:	d81b      	bhi.n	8003b78 <UART_SetConfig+0x2b8>
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b44:	d00c      	beq.n	8003b60 <UART_SetConfig+0x2a0>
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4a:	d815      	bhi.n	8003b78 <UART_SetConfig+0x2b8>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <UART_SetConfig+0x298>
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b54:	d008      	beq.n	8003b68 <UART_SetConfig+0x2a8>
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x2b8>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e022      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e01e      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e01a      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b76:	e016      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7e:	e012      	b.n	8003ba6 <UART_SetConfig+0x2e6>
 8003b80:	efff69f3 	.word	0xefff69f3
 8003b84:	40008000 	.word	0x40008000
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40004400 	.word	0x40004400
 8003b94:	40004800 	.word	0x40004800
 8003b98:	40004c00 	.word	0x40004c00
 8003b9c:	40005000 	.word	0x40005000
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a9f      	ldr	r2, [pc, #636]	@ (8003e28 <UART_SetConfig+0x568>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d17a      	bne.n	8003ca6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d824      	bhi.n	8003c02 <UART_SetConfig+0x342>
 8003bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <UART_SetConfig+0x300>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003c03 	.word	0x08003c03
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003c03 	.word	0x08003c03
 8003bd0:	08003bf3 	.word	0x08003bf3
 8003bd4:	08003c03 	.word	0x08003c03
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c03 	.word	0x08003c03
 8003be0:	08003bfb 	.word	0x08003bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7fe fd18 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61f8      	str	r0, [r7, #28]
        break;
 8003bea:	e010      	b.n	8003c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bec:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <UART_SetConfig+0x56c>)
 8003bee:	61fb      	str	r3, [r7, #28]
        break;
 8003bf0:	e00d      	b.n	8003c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf2:	f7fe fc79 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003bf6:	61f8      	str	r0, [r7, #28]
        break;
 8003bf8:	e009      	b.n	8003c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfe:	61fb      	str	r3, [r7, #28]
        break;
 8003c00:	e005      	b.n	8003c0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80fb 	beq.w	8003e0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d305      	bcc.n	8003c32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d903      	bls.n	8003c3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c38:	e0e8      	b.n	8003e0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	461c      	mov	r4, r3
 8003c40:	4615      	mov	r5, r2
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	022b      	lsls	r3, r5, #8
 8003c4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c50:	0222      	lsls	r2, r4, #8
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	6849      	ldr	r1, [r1, #4]
 8003c56:	0849      	lsrs	r1, r1, #1
 8003c58:	2000      	movs	r0, #0
 8003c5a:	4688      	mov	r8, r1
 8003c5c:	4681      	mov	r9, r0
 8003c5e:	eb12 0a08 	adds.w	sl, r2, r8
 8003c62:	eb43 0b09 	adc.w	fp, r3, r9
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c74:	4650      	mov	r0, sl
 8003c76:	4659      	mov	r1, fp
 8003c78:	f7fc fab8 	bl	80001ec <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8a:	d308      	bcc.n	8003c9e <UART_SetConfig+0x3de>
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c92:	d204      	bcs.n	8003c9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	60da      	str	r2, [r3, #12]
 8003c9c:	e0b6      	b.n	8003e0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ca4:	e0b2      	b.n	8003e0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cae:	d15e      	bne.n	8003d6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d828      	bhi.n	8003d0a <UART_SetConfig+0x44a>
 8003cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <UART_SetConfig+0x400>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe fc98 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	61f8      	str	r0, [r7, #28]
        break;
 8003cea:	e014      	b.n	8003d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe fcaa 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	61f8      	str	r0, [r7, #28]
        break;
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e2c <UART_SetConfig+0x56c>)
 8003cf6:	61fb      	str	r3, [r7, #28]
        break;
 8003cf8:	e00d      	b.n	8003d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fbf5 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003cfe:	61f8      	str	r0, [r7, #28]
        break;
 8003d00:	e009      	b.n	8003d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e005      	b.n	8003d16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d077      	beq.n	8003e0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005a      	lsls	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d916      	bls.n	8003d66 <UART_SetConfig+0x4a6>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3e:	d212      	bcs.n	8003d66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f023 030f 	bic.w	r3, r3, #15
 8003d48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	8afa      	ldrh	r2, [r7, #22]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	e052      	b.n	8003e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d6c:	e04e      	b.n	8003e0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d827      	bhi.n	8003dc6 <UART_SetConfig+0x506>
 8003d76:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <UART_SetConfig+0x4bc>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003dc7 	.word	0x08003dc7
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dc7 	.word	0x08003dc7
 8003d98:	08003dc7 	.word	0x08003dc7
 8003d9c:	08003dbf 	.word	0x08003dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7fe fc3a 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003da4:	61f8      	str	r0, [r7, #28]
        break;
 8003da6:	e014      	b.n	8003dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7fe fc4c 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003dac:	61f8      	str	r0, [r7, #28]
        break;
 8003dae:	e010      	b.n	8003dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <UART_SetConfig+0x56c>)
 8003db2:	61fb      	str	r3, [r7, #28]
        break;
 8003db4:	e00d      	b.n	8003dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db6:	f7fe fb97 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003dba:	61f8      	str	r0, [r7, #28]
        break;
 8003dbc:	e009      	b.n	8003dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc2:	61fb      	str	r3, [r7, #28]
        break;
 8003dc4:	e005      	b.n	8003dd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d019      	beq.n	8003e0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085a      	lsrs	r2, r3, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	d909      	bls.n	8003e06 <UART_SetConfig+0x546>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	d205      	bcs.n	8003e06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	e002      	b.n	8003e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	@ 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e26:	bf00      	nop
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	00f42400 	.word	0x00f42400

08003e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f2e:	d10a      	bne.n	8003f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b098      	sub	sp, #96	@ 0x60
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f84:	f7fc fe1a 	bl	8000bbc <HAL_GetTick>
 8003f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d12e      	bne.n	8003ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f88c 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d021      	beq.n	8003ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e6      	bne.n	8003fb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e062      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d149      	bne.n	8004098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f856 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03c      	beq.n	8004098 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	623b      	str	r3, [r7, #32]
   return(result);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30
 800403e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004070:	61fa      	str	r2, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e011      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3758      	adds	r7, #88	@ 0x58
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	e04f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d04b      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fc fd6d 	bl	8000bbc <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e04e      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d037      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d034      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d031      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d110      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f838 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2208      	movs	r2, #8
 8004132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e029      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d111      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f81e 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	429a      	cmp	r2, r3
 8004192:	d0a0      	beq.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800419e:	b480      	push	{r7}
 80041a0:	b095      	sub	sp, #84	@ 0x54
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004210:	2b01      	cmp	r3, #1
 8004212:	d118      	bne.n	8004246 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	60bb      	str	r3, [r7, #8]
   return(result);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e6      	bne.n	8004214 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800425a:	bf00      	nop
 800425c:	3754      	adds	r7, #84	@ 0x54
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff fb05 	bl	8003894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6979      	ldr	r1, [r7, #20]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	613b      	str	r3, [r7, #16]
   return(result);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e6      	bne.n	800429a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fad1 	bl	8003880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042de:	bf00      	nop
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <memset>:
 80042fa:	4402      	add	r2, r0
 80042fc:	4603      	mov	r3, r0
 80042fe:	4293      	cmp	r3, r2
 8004300:	d100      	bne.n	8004304 <memset+0xa>
 8004302:	4770      	bx	lr
 8004304:	f803 1b01 	strb.w	r1, [r3], #1
 8004308:	e7f9      	b.n	80042fe <memset+0x4>
	...

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4d0d      	ldr	r5, [pc, #52]	@ (8004344 <__libc_init_array+0x38>)
 8004310:	4c0d      	ldr	r4, [pc, #52]	@ (8004348 <__libc_init_array+0x3c>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	2600      	movs	r6, #0
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	4d0b      	ldr	r5, [pc, #44]	@ (800434c <__libc_init_array+0x40>)
 800431e:	4c0c      	ldr	r4, [pc, #48]	@ (8004350 <__libc_init_array+0x44>)
 8004320:	f000 f818 	bl	8004354 <_init>
 8004324:	1b64      	subs	r4, r4, r5
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	2600      	movs	r6, #0
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f855 3b04 	ldr.w	r3, [r5], #4
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f855 3b04 	ldr.w	r3, [r5], #4
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08004430 	.word	0x08004430
 8004348:	08004430 	.word	0x08004430
 800434c:	08004430 	.word	0x08004430
 8004350:	08004434 	.word	0x08004434

08004354 <_init>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	bf00      	nop
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr

08004360 <_fini>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	bf00      	nop
 8004364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004366:	bc08      	pop	{r3}
 8004368:	469e      	mov	lr, r3
 800436a:	4770      	bx	lr
